module;
#include <version>

// libc++
#if defined(_LIBCPP_VERSION)
// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// WARNING, this entire header is generated by
// utils/generate_libcxx_cppm_in.py
// DO NOT MODIFY!

#include <__config>

// The headers of Table 24: C++ library headers [tab:headers.cpp]
// and the headers of Table 25: C++ headers for C library facilities [tab:headers.cpp.c]
#include <algorithm>
#include <any>
#include <array>
#if _LIBCPP_HAS_ATOMIC_HEADER
#  include <atomic>
#endif
#include <barrier>
#include <bit>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <charconv>
#include <chrono>
#include <cinttypes>
#include <climits>
#if _LIBCPP_HAS_LOCALIZATION
#  include <clocale>
#endif
#include <cmath>
#if _LIBCPP_HAS_LOCALIZATION
#  include <codecvt>
#endif
#include <compare>
#include <complex>
#include <concepts>
#include <condition_variable>
#include <coroutine>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cuchar>
#include <cwchar>
#include <cwctype>
#include <deque>
#include <exception>
#include <execution>
#include <expected>
#include <filesystem>
#include <flat_map>
#include <format>
#include <forward_list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <fstream>
#endif
#include <functional>
#include <future>
#include <initializer_list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <iomanip>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <ios>
#endif
#include <iosfwd>
#if _LIBCPP_HAS_LOCALIZATION
#  include <iostream>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <istream>
#endif
#include <iterator>
#include <latch>
#include <limits>
#include <list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <locale>
#endif
#include <map>

#include <mdspan>

#include <memory>
#include <memory_resource>
#include <mutex>
#include <new>
#include <numbers>
#include <numeric>
#include <optional>
#if _LIBCPP_HAS_LOCALIZATION
#  include <ostream>
#endif
#include <print>
#include <queue>
#include <random>
#include <ranges>
#include <ratio>
#if _LIBCPP_HAS_LOCALIZATION
#  include <regex>
#endif
#include <scoped_allocator>
#include <semaphore>
#include <set>
#include <shared_mutex>
#include <source_location>
#include <span>
#if _LIBCPP_HAS_LOCALIZATION
#  include <sstream>
#endif
#include <stack>
#include <stdexcept>
#include <stop_token>
#if _LIBCPP_HAS_LOCALIZATION
#  include <streambuf>
#endif
#include <string>
#include <string_view>
#if _LIBCPP_HAS_LOCALIZATION
#  include <strstream>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <syncstream>
#endif
#include <system_error>
#include <thread>
#include <tuple>
#include <type_traits>
#include <typeindex>
#include <typeinfo>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <variant>
#include <vector>

// *** Headers not yet available ***
//
// This validation is mainly to catch when a new header is added but adding the
// corresponding .inc file is forgotten. However, the check based on __has_include
// alone doesn't work on Windows because the Windows SDK is on the include path,
// and that means the MSVC STL headers can be found as well, tricking __has_include
// into thinking that libc++ provides the header.
//
#ifndef _WIN32
#  if __has_include(<debugging>)
#    error "please update the header information for <debugging> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<debugging>)
#  if __has_include(<flat_set>)
#    error "please update the header information for <flat_set> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<flat_set>)
#  if __has_include(<generator>)
#    error "please update the header information for <generator> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<generator>)
#  if __has_include(<hazard_pointer>)
#    error "please update the header information for <hazard_pointer> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<hazard_pointer>)
#  if __has_include(<inplace_vector>)
#    error "please update the header information for <inplace_vector> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<inplace_vector>)
#  if __has_include(<linalg>)
#    error "please update the header information for <linalg> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<linalg>)
#  if __has_include(<rcu>)
#    error "please update the header information for <rcu> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<rcu>)
#  if __has_include(<spanstream>)
#    error "please update the header information for <spanstream> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<spanstream>)
#  if __has_include(<stacktrace>)
#    error "please update the header information for <stacktrace> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stacktrace>)
#  if __has_include(<stdfloat>)
#    error "please update the header information for <stdfloat> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stdfloat>)
#  if __has_include(<text_encoding>)
#    error "please update the header information for <text_encoding> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<text_encoding>)
#endif // _WIN32

export module build_std;

#include "libcxx/std/algorithm.inc"
#include "libcxx/std/any.inc"
#include "libcxx/std/array.inc"
#include "libcxx/std/atomic.inc"
#include "libcxx/std/barrier.inc"
#include "libcxx/std/bit.inc"
#include "libcxx/std/bitset.inc"
#include "libcxx/std/cassert.inc"
#include "libcxx/std/cctype.inc"
#include "libcxx/std/cerrno.inc"
#include "libcxx/std/cfenv.inc"
#include "libcxx/std/cfloat.inc"
#include "libcxx/std/charconv.inc"
#include "libcxx/std/chrono.inc"
#include "libcxx/std/cinttypes.inc"
#include "libcxx/std/climits.inc"
#include "libcxx/std/clocale.inc"
#include "libcxx/std/cmath.inc"
#include "libcxx/std/codecvt.inc"
#include "libcxx/std/compare.inc"
#include "libcxx/std/complex.inc"
#include "libcxx/std/concepts.inc"
#include "libcxx/std/condition_variable.inc"
#include "libcxx/std/coroutine.inc"
#include "libcxx/std/csetjmp.inc"
#include "libcxx/std/csignal.inc"
#include "libcxx/std/cstdarg.inc"
#include "libcxx/std/cstddef.inc"
#include "libcxx/std/cstdint.inc"
#include "libcxx/std/cstdio.inc"
#include "libcxx/std/cstdlib.inc"
#include "libcxx/std/cstring.inc"
#include "libcxx/std/ctime.inc"
#include "libcxx/std/cuchar.inc"
#include "libcxx/std/cwchar.inc"
#include "libcxx/std/cwctype.inc"
#include "libcxx/std/deque.inc"
#include "libcxx/std/exception.inc"
#include "libcxx/std/execution.inc"
#include "libcxx/std/expected.inc"
#include "libcxx/std/filesystem.inc"
#include "libcxx/std/flat_map.inc"
#include "libcxx/std/flat_set.inc"
#include "libcxx/std/format.inc"
#include "libcxx/std/forward_list.inc"
#include "libcxx/std/fstream.inc"
#include "libcxx/std/functional.inc"
#include "libcxx/std/future.inc"
#include "libcxx/std/generator.inc"
#include "libcxx/std/hazard_pointer.inc"
#include "libcxx/std/initializer_list.inc"
#include "libcxx/std/iomanip.inc"
#include "libcxx/std/ios.inc"
#include "libcxx/std/iosfwd.inc"
#include "libcxx/std/iostream.inc"
#include "libcxx/std/istream.inc"
#include "libcxx/std/iterator.inc"
#include "libcxx/std/latch.inc"
#include "libcxx/std/limits.inc"
#include "libcxx/std/list.inc"
#include "libcxx/std/locale.inc"
#include "libcxx/std/map.inc"
#include "libcxx/std/mdspan.inc"
#include "libcxx/std/memory.inc"
#include "libcxx/std/memory_resource.inc"
#include "libcxx/std/mutex.inc"
#include "libcxx/std/new.inc"
#include "libcxx/std/numbers.inc"
#include "libcxx/std/numeric.inc"
#include "libcxx/std/optional.inc"
#include "libcxx/std/ostream.inc"
#include "libcxx/std/print.inc"
#include "libcxx/std/queue.inc"
#include "libcxx/std/random.inc"
#include "libcxx/std/ranges.inc"
#include "libcxx/std/ratio.inc"
#include "libcxx/std/rcu.inc"
#include "libcxx/std/regex.inc"
#include "libcxx/std/scoped_allocator.inc"
#include "libcxx/std/semaphore.inc"
#include "libcxx/std/set.inc"
#include "libcxx/std/shared_mutex.inc"
#include "libcxx/std/source_location.inc"
#include "libcxx/std/span.inc"
#include "libcxx/std/spanstream.inc"
#include "libcxx/std/sstream.inc"
#include "libcxx/std/stack.inc"
#include "libcxx/std/stacktrace.inc"
#include "libcxx/std/stdexcept.inc"
#include "libcxx/std/stdfloat.inc"
#include "libcxx/std/stop_token.inc"
#include "libcxx/std/streambuf.inc"
#include "libcxx/std/string.inc"
#include "libcxx/std/string_view.inc"
#include "libcxx/std/strstream.inc"
#include "libcxx/std/syncstream.inc"
#include "libcxx/std/system_error.inc"
#include "libcxx/std/text_encoding.inc"
#include "libcxx/std/thread.inc"
#include "libcxx/std/tuple.inc"
#include "libcxx/std/type_traits.inc"
#include "libcxx/std/typeindex.inc"
#include "libcxx/std/typeinfo.inc"
#include "libcxx/std/unordered_map.inc"
#include "libcxx/std/unordered_set.inc"
#include "libcxx/std/utility.inc"
#include "libcxx/std/valarray.inc"
#include "libcxx/std/variant.inc"
#include "libcxx/std/vector.inc"
#include "libcxx/std/version.inc"

#elif defined(_MSC_VER)
// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// WARNING, this entire header is generated by
// utils/generate_libcxx_cppm_in.py
// DO NOT MODIFY!

#include "libstdcxx-msvc/__fake_config.h"

// The headers of Table 24: C++ library headers [tab:headers.cpp]
// and the headers of Table 25: C++ headers for C library facilities [tab:headers.cpp.c]
#include <algorithm>
#include <any>
#include <array>
#if _LIBCPP_HAS_ATOMIC_HEADER
#  include <atomic>
#endif
#include <barrier>
#include <bit>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <charconv>
#include <chrono>
#include <cinttypes>
#include <climits>
#if _LIBCPP_HAS_LOCALIZATION
#  include <clocale>
#endif
#include <cmath>
#if _LIBCPP_HAS_LOCALIZATION
#  include <codecvt>
#endif
#include <compare>
#include <complex>
#include <concepts>
#include <condition_variable>
#include <coroutine>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cuchar>
#include <cwchar>
#include <cwctype>
#include <deque>
#include <exception>
#include <execution>
#include <expected>
#include <filesystem>
#if __has_include(<flat_map>)
#include <flat_map>
#endif
#include <format>
#include <forward_list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <fstream>
#endif
#include <functional>
#include <future>
#include <initializer_list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <iomanip>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <ios>
#endif
#include <iosfwd>
#if _LIBCPP_HAS_LOCALIZATION
#  include <iostream>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <istream>
#endif
#include <iterator>
#include <latch>
#include <limits>
#include <list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <locale>
#endif
#include <map>
#include <mdspan>
#include <memory>
#include <memory_resource>
#include <mutex>
#include <new>
#include <numbers>
#include <numeric>
#include <optional>
#if _LIBCPP_HAS_LOCALIZATION
#  include <ostream>
#endif
#include <print>
#include <queue>
#include <random>
#include <ranges>
#include <ratio>
#if _LIBCPP_HAS_LOCALIZATION
#  include <regex>
#endif
#include <scoped_allocator>
#include <semaphore>
#include <set>
#include <shared_mutex>
#include <source_location>
#include <span>
#if _LIBCPP_HAS_LOCALIZATION
#  include <sstream>
#endif
#include <stack>
#if __has_include(<stacktrace>)
#include <stacktrace>
#endif
#include <stdexcept>
#include <stop_token>
#if _LIBCPP_HAS_LOCALIZATION
#  include <streambuf>
#endif
#include <string>
#include <string_view>
#if _LIBCPP_HAS_LOCALIZATION
#  include <strstream>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <syncstream>
#endif
#include <system_error>
#include <thread>
#include <tuple>
#include <type_traits>
#include <typeindex>
#include <typeinfo>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <variant>
#include <vector>

// *** Headers not yet available ***
//
// This validation is mainly to catch when a new header is added but adding the
// corresponding .inc file is forgotten. However, the check based on __has_include
// alone doesn't work on Windows because the Windows SDK is on the include path,
// and that means the MSVC STL headers can be found as well, tricking __has_include
// into thinking that libc++ provides the header.
//
#ifndef _WIN32
#  if __has_include(<debugging>)
#    error "please update the header information for <debugging> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<debugging>)
#  if __has_include(<flat_set>)
#    error "please update the header information for <flat_set> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<flat_set>)
#  if __has_include(<generator>)
#    error "please update the header information for <generator> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<generator>)
#  if __has_include(<hazard_pointer>)
#    error "please update the header information for <hazard_pointer> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<hazard_pointer>)
#  if __has_include(<inplace_vector>)
#    error "please update the header information for <inplace_vector> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<inplace_vector>)
#  if __has_include(<linalg>)
#    error "please update the header information for <linalg> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<linalg>)
#  if __has_include(<rcu>)
#    error "please update the header information for <rcu> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<rcu>)
#  if __has_include(<spanstream>)
#    error "please update the header information for <spanstream> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<spanstream>)
#  if __has_include(<stacktrace>)
#    error "please update the header information for <stacktrace> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stacktrace>)
#  if __has_include(<stdfloat>)
#    error "please update the header information for <stdfloat> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stdfloat>)
#  if __has_include(<text_encoding>)
#    error "please update the header information for <text_encoding> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<text_encoding>)
#endif // _WIN32

export module build_std;

#include "libstdcxx-msvc/std/algorithm.inc"
#include "libstdcxx-msvc/std/any.inc"
#include "libstdcxx-msvc/std/array.inc"
#include "libstdcxx-msvc/std/atomic.inc"
#include "libstdcxx-msvc/std/barrier.inc"
#include "libstdcxx-msvc/std/bit.inc"
#include "libstdcxx-msvc/std/bitset.inc"
#include "libstdcxx-msvc/std/cassert.inc"
#include "libstdcxx-msvc/std/cctype.inc"
#include "libstdcxx-msvc/std/cerrno.inc"
#include "libstdcxx-msvc/std/cfenv.inc"
#include "libstdcxx-msvc/std/cfloat.inc"
#include "libstdcxx-msvc/std/charconv.inc"
#include "libstdcxx-msvc/std/chrono.inc"
#include "libstdcxx-msvc/std/cinttypes.inc"
#include "libstdcxx-msvc/std/climits.inc"
#include "libstdcxx-msvc/std/clocale.inc"
#include "libstdcxx-msvc/std/cmath.inc"
#include "libstdcxx-msvc/std/codecvt.inc"
#include "libstdcxx-msvc/std/compare.inc"
#include "libstdcxx-msvc/std/complex.inc"
#include "libstdcxx-msvc/std/concepts.inc"
#include "libstdcxx-msvc/std/condition_variable.inc"
#include "libstdcxx-msvc/std/coroutine.inc"
#include "libstdcxx-msvc/std/csetjmp.inc"
#include "libstdcxx-msvc/std/csignal.inc"
#include "libstdcxx-msvc/std/cstdarg.inc"
#include "libstdcxx-msvc/std/cstddef.inc"
#include "libstdcxx-msvc/std/cstdint.inc"
#include "libstdcxx-msvc/std/cstdio.inc"
#include "libstdcxx-msvc/std/cstdlib.inc"
#include "libstdcxx-msvc/std/cstring.inc"
#include "libstdcxx-msvc/std/ctime.inc"
#include "libstdcxx-msvc/std/cuchar.inc"
#include "libstdcxx-msvc/std/cwchar.inc"
#include "libstdcxx-msvc/std/cwctype.inc"
#include "libstdcxx-msvc/std/deque.inc"
#include "libstdcxx-msvc/std/exception.inc"
#include "libstdcxx-msvc/std/execution.inc"
#include "libstdcxx-msvc/std/expected.inc"
#include "libstdcxx-msvc/std/filesystem.inc"
#if __has_include(<flat_map>)
#include "libstdcxx-msvc/std/flat_map.inc"
#endif
#include "libstdcxx-msvc/std/flat_set.inc"
#include "libstdcxx-msvc/std/format.inc"
#include "libstdcxx-msvc/std/forward_list.inc"
#include "libstdcxx-msvc/std/fstream.inc"
#include "libstdcxx-msvc/std/functional.inc"
#include "libstdcxx-msvc/std/future.inc"
#include "libstdcxx-msvc/std/generator.inc"
#include "libstdcxx-msvc/std/hazard_pointer.inc"
#include "libstdcxx-msvc/std/initializer_list.inc"
#include "libstdcxx-msvc/std/iomanip.inc"
#include "libstdcxx-msvc/std/ios.inc"
#include "libstdcxx-msvc/std/iosfwd.inc"
#include "libstdcxx-msvc/std/iostream.inc"
#include "libstdcxx-msvc/std/istream.inc"
#include "libstdcxx-msvc/std/iterator.inc"
#include "libstdcxx-msvc/std/latch.inc"
#include "libstdcxx-msvc/std/limits.inc"
#include "libstdcxx-msvc/std/list.inc"
#include "libstdcxx-msvc/std/locale.inc"
#include "libstdcxx-msvc/std/map.inc"
#include "libstdcxx-msvc/std/mdspan.inc"
#include "libstdcxx-msvc/std/memory.inc"
#include "libstdcxx-msvc/std/memory_resource.inc"
#include "libstdcxx-msvc/std/mutex.inc"
#include "libstdcxx-msvc/std/new.inc"
#include "libstdcxx-msvc/std/numbers.inc"
#include "libstdcxx-msvc/std/numeric.inc"
#include "libstdcxx-msvc/std/optional.inc"
#include "libstdcxx-msvc/std/ostream.inc"
#include "libstdcxx-msvc/std/print.inc"
#include "libstdcxx-msvc/std/queue.inc"
#include "libstdcxx-msvc/std/random.inc"
#include "libstdcxx-msvc/std/ranges.inc"
#include "libstdcxx-msvc/std/ratio.inc"
#include "libstdcxx-msvc/std/rcu.inc"
#include "libstdcxx-msvc/std/regex.inc"
#include "libstdcxx-msvc/std/scoped_allocator.inc"
#include "libstdcxx-msvc/std/semaphore.inc"
#include "libstdcxx-msvc/std/set.inc"
#include "libstdcxx-msvc/std/shared_mutex.inc"
#include "libstdcxx-msvc/std/source_location.inc"
#include "libstdcxx-msvc/std/span.inc"
#include "libstdcxx-msvc/std/spanstream.inc"
#include "libstdcxx-msvc/std/sstream.inc"
#include "libstdcxx-msvc/std/stack.inc"
#include "libstdcxx-msvc/std/stacktrace.inc"
#include "libstdcxx-msvc/std/stdexcept.inc"
#include "libstdcxx-msvc/std/stdfloat.inc"
#include "libstdcxx-msvc/std/stop_token.inc"
#include "libstdcxx-msvc/std/streambuf.inc"
#include "libstdcxx-msvc/std/string.inc"
#include "libstdcxx-msvc/std/string_view.inc"
#include "libstdcxx-msvc/std/strstream.inc"
#include "libstdcxx-msvc/std/syncstream.inc"
#include "libstdcxx-msvc/std/system_error.inc"
#include "libstdcxx-msvc/std/text_encoding.inc"
#include "libstdcxx-msvc/std/thread.inc"
#include "libstdcxx-msvc/std/tuple.inc"
#include "libstdcxx-msvc/std/type_traits.inc"
#include "libstdcxx-msvc/std/typeindex.inc"
#include "libstdcxx-msvc/std/typeinfo.inc"
#include "libstdcxx-msvc/std/unordered_map.inc"
#include "libstdcxx-msvc/std/unordered_set.inc"
#include "libstdcxx-msvc/std/utility.inc"
#include "libstdcxx-msvc/std/valarray.inc"
#include "libstdcxx-msvc/std/variant.inc"
#include "libstdcxx-msvc/std/vector.inc"
#include "libstdcxx-msvc/std/version.inc"

#elif defined(__GLIBCXX__)

#include "libstdcxx-gnu/__fake_config.h"

// The headers of Table 24: C++ library headers [tab:headers.cpp]
// and the headers of Table 25: C++ headers for C library facilities [tab:headers.cpp.c]
#include <algorithm>
#include <any>
#include <array>
#if _LIBCPP_HAS_ATOMIC_HEADER
#  include <atomic>
#endif
#include <barrier>
#include <bit>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <charconv>
#include <chrono>
#include <cinttypes>
#include <climits>
#if _LIBCPP_HAS_LOCALIZATION
#  include <clocale>
#endif
#include <cmath>
#if _LIBCPP_HAS_LOCALIZATION
#  include <codecvt>
#endif
#include <compare>
#include <complex>
#include <concepts>
#include <condition_variable>
#include <coroutine>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cuchar>
#include <cwchar>
#include <cwctype>
#include <deque>
#include <exception>
#include <execution>
#include <expected>
#include <filesystem>
#if __has_include(<flat_map>)
#include <flat_map>
#endif
#include <format>
#include <forward_list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <fstream>
#endif
#include <functional>
#include <future>
#include <initializer_list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <iomanip>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <ios>
#endif
#include <iosfwd>
#if _LIBCPP_HAS_LOCALIZATION
#  include <iostream>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <istream>
#endif
#include <iterator>
#include <latch>
#include <limits>
#include <list>
#if _LIBCPP_HAS_LOCALIZATION
#  include <locale>
#endif
#include <map>
#if __has_include(<mdspan>)
#include <mdspan>
#endif
#include <memory>
#include <memory_resource>
#include <mutex>
#include <new>
#include <numbers>
#include <numeric>
#include <optional>
#if _LIBCPP_HAS_LOCALIZATION
#  include <ostream>
#endif
#if __has_include(<print>)
#include <print>
#endif
#include <queue>
#include <random>
#include <ranges>
#include <ratio>
#if _LIBCPP_HAS_LOCALIZATION
#  include <regex>
#endif
#include <scoped_allocator>
#include <semaphore>
#include <set>
#include <shared_mutex>
#include <source_location>
#include <span>
#if _LIBCPP_HAS_LOCALIZATION
#  include <sstream>
#endif
#include <stack>
#if __has_include(<stacktrace>)
#include <stacktrace>
#endif
#include <stdexcept>
#include <stop_token>
#if _LIBCPP_HAS_LOCALIZATION
#  include <streambuf>
#endif
#include <string>
#include <string_view>
#if _LIBCPP_HAS_LOCALIZATION
#  include <strstream>
#endif
#if _LIBCPP_HAS_LOCALIZATION
#  include <syncstream>
#endif
#include <system_error>
#include <thread>
#include <tuple>
#include <type_traits>
#include <typeindex>
#include <typeinfo>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <variant>
#include <vector>

#if __has_include(<spanstream>)
#include <spanstream>
#endif

#if __has_include(<stdfloat>)
#include <stdfloat>
#endif

// *** Headers not yet available ***
//
// This validation is mainly to catch when a new header is added but adding the
// corresponding .inc file is forgotten. However, the check based on __has_include
// alone doesn't work on Windows because the Windows SDK is on the include path,
// and that means the MSVC STL headers can be found as well, tricking __has_include
// into thinking that libc++ provides the header.
//
#ifndef _WIN32
#  if __has_include(<debugging>)
#    error "please update the header information for <debugging> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<debugging>)
#  if __has_include(<flat_set>)
#    error "please update the header information for <flat_set> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<flat_set>)
#  if __has_include(<generator>)
#    error "please update the header information for <generator> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<generator>)
#  if __has_include(<hazard_pointer>)
#    error "please update the header information for <hazard_pointer> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<hazard_pointer>)
#  if __has_include(<inplace_vector>)
#    error "please update the header information for <inplace_vector> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<inplace_vector>)
#  if __has_include(<linalg>)
#    error "please update the header information for <linalg> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<linalg>)
#  if __has_include(<rcu>)
#    error "please update the header information for <rcu> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<rcu>)
// #  if __has_include(<spanstream>)
// #    error "please update the header information for <spanstream> in headers_not_available in utils/libcxx/header_information.py"
// #  endif // __has_include(<spanstream>)
// #  if __has_include(<stacktrace>)
// #    error "please update the header information for <stacktrace> in headers_not_available in utils/libcxx/header_information.py"
// #  endif // __has_include(<stacktrace>)
// #  if __has_include(<stdfloat>)
// #    error "please update the header information for <stdfloat> in headers_not_available in utils/libcxx/header_information.py"
// #  endif // __has_include(<stdfloat>)
#  if __has_include(<text_encoding>)
#    error "please update the header information for <text_encoding> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<text_encoding>)
#endif // _WIN32

export module build_std;

#include "libstdcxx-gnu/std/algorithm.inc"
#include "libstdcxx-gnu/std/any.inc"
#include "libstdcxx-gnu/std/array.inc"
#include "libstdcxx-gnu/std/atomic.inc"
#include "libstdcxx-gnu/std/barrier.inc"
#include "libstdcxx-gnu/std/bit.inc"
#include "libstdcxx-gnu/std/bitset.inc"
#include "libstdcxx-gnu/std/cassert.inc"
#include "libstdcxx-gnu/std/cctype.inc"
#include "libstdcxx-gnu/std/cerrno.inc"
#include "libstdcxx-gnu/std/cfenv.inc"
#include "libstdcxx-gnu/std/cfloat.inc"
#include "libstdcxx-gnu/std/charconv.inc"
#include "libstdcxx-gnu/std/chrono.inc"
#include "libstdcxx-gnu/std/cinttypes.inc"
#include "libstdcxx-gnu/std/climits.inc"
#include "libstdcxx-gnu/std/clocale.inc"
#include "libstdcxx-gnu/std/cmath.inc"
#include "libstdcxx-gnu/std/codecvt.inc"
#include "libstdcxx-gnu/std/compare.inc"
#include "libstdcxx-gnu/std/complex.inc"
#include "libstdcxx-gnu/std/concepts.inc"
#include "libstdcxx-gnu/std/condition_variable.inc"
#include "libstdcxx-gnu/std/coroutine.inc"
#include "libstdcxx-gnu/std/csetjmp.inc"
#include "libstdcxx-gnu/std/csignal.inc"
#include "libstdcxx-gnu/std/cstdarg.inc"
#include "libstdcxx-gnu/std/cstddef.inc"
#include "libstdcxx-gnu/std/cstdint.inc"
#include "libstdcxx-gnu/std/cstdio.inc"
#include "libstdcxx-gnu/std/cstdlib.inc"
#include "libstdcxx-gnu/std/cstring.inc"
#include "libstdcxx-gnu/std/ctime.inc"
#include "libstdcxx-gnu/std/cuchar.inc"
#include "libstdcxx-gnu/std/cwchar.inc"
#include "libstdcxx-gnu/std/cwctype.inc"
#include "libstdcxx-gnu/std/deque.inc"
#include "libstdcxx-gnu/std/exception.inc"
#include "libstdcxx-gnu/std/execution.inc"
#include "libstdcxx-gnu/std/expected.inc"
#include "libstdcxx-gnu/std/filesystem.inc"
#if __has_include(<flat_map>)
#include "libstdcxx-gnu/std/flat_map.inc"
#endif
#include "libstdcxx-gnu/std/flat_set.inc"
#include "libstdcxx-gnu/std/format.inc"
#include "libstdcxx-gnu/std/forward_list.inc"
#include "libstdcxx-gnu/std/fstream.inc"
#include "libstdcxx-gnu/std/functional.inc"
#include "libstdcxx-gnu/std/future.inc"
#include "libstdcxx-gnu/std/generator.inc"
#include "libstdcxx-gnu/std/hazard_pointer.inc"
#include "libstdcxx-gnu/std/initializer_list.inc"
#include "libstdcxx-gnu/std/iomanip.inc"
#include "libstdcxx-gnu/std/ios.inc"
#include "libstdcxx-gnu/std/iosfwd.inc"
#include "libstdcxx-gnu/std/iostream.inc"
#include "libstdcxx-gnu/std/istream.inc"
#include "libstdcxx-gnu/std/iterator.inc"
#include "libstdcxx-gnu/std/latch.inc"
#include "libstdcxx-gnu/std/limits.inc"
#include "libstdcxx-gnu/std/list.inc"
#include "libstdcxx-gnu/std/locale.inc"
#include "libstdcxx-gnu/std/map.inc"
#if __has_include(<mdspan>)
#include "libstdcxx-gnu/std/mdspan.inc"
#endif
#include "libstdcxx-gnu/std/memory.inc"
#include "libstdcxx-gnu/std/memory_resource.inc"
#include "libstdcxx-gnu/std/mutex.inc"
#include "libstdcxx-gnu/std/new.inc"
#include "libstdcxx-gnu/std/numbers.inc"
#include "libstdcxx-gnu/std/numeric.inc"
#include "libstdcxx-gnu/std/optional.inc"
#include "libstdcxx-gnu/std/ostream.inc"
#if __has_include(<print>)
#include "libstdcxx-gnu/std/print.inc"
#endif
#include "libstdcxx-gnu/std/queue.inc"
#include "libstdcxx-gnu/std/random.inc"
#include "libstdcxx-gnu/std/ranges.inc"
#include "libstdcxx-gnu/std/ratio.inc"
#include "libstdcxx-gnu/std/rcu.inc"
#include "libstdcxx-gnu/std/regex.inc"
#include "libstdcxx-gnu/std/scoped_allocator.inc"
#include "libstdcxx-gnu/std/semaphore.inc"
#include "libstdcxx-gnu/std/set.inc"
#include "libstdcxx-gnu/std/shared_mutex.inc"
#include "libstdcxx-gnu/std/source_location.inc"
#include "libstdcxx-gnu/std/span.inc"
#if __has_include(<spanstream>)
#include "libstdcxx-gnu/std/spanstream.inc"
#endif
#include "libstdcxx-gnu/std/sstream.inc"
#include "libstdcxx-gnu/std/stack.inc"
#include "libstdcxx-gnu/std/stacktrace.inc"
#include "libstdcxx-gnu/std/stdexcept.inc"
#if __has_include(<stdfloat>)
#include "libstdcxx-gnu/std/stdfloat.inc"
#endif
#include "libstdcxx-gnu/std/stop_token.inc"
#include "libstdcxx-gnu/std/streambuf.inc"
#include "libstdcxx-gnu/std/string.inc"
#include "libstdcxx-gnu/std/string_view.inc"
#include "libstdcxx-gnu/std/strstream.inc"
#include "libstdcxx-gnu/std/syncstream.inc"
#include "libstdcxx-gnu/std/system_error.inc"
#include "libstdcxx-gnu/std/text_encoding.inc"
#include "libstdcxx-gnu/std/thread.inc"
#include "libstdcxx-gnu/std/tuple.inc"
#include "libstdcxx-gnu/std/type_traits.inc"
#include "libstdcxx-gnu/std/typeindex.inc"
#include "libstdcxx-gnu/std/typeinfo.inc"
#include "libstdcxx-gnu/std/unordered_map.inc"
#include "libstdcxx-gnu/std/unordered_set.inc"
#include "libstdcxx-gnu/std/utility.inc"
#include "libstdcxx-gnu/std/valarray.inc"
#include "libstdcxx-gnu/std/variant.inc"
#include "libstdcxx-gnu/std/vector.inc"
#include "libstdcxx-gnu/std/version.inc"

#include "libstdcxx-gnu/misc.inc"

#else
#error "Unsupported std library"
#endif
