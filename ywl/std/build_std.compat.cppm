module;
#include <version>

#if defined(_LIBCPP_VERSION)
// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// WARNING, this entire header is generated by
// utils/generate_libcxx_cppm_in.py
// DO NOT MODIFY!

#include <__config>

// The headers of Table 24: C++ library headers [tab:headers.cpp]
// and the headers of Table 25: C++ headers for C library facilities [tab:headers.cpp.c]
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <cinttypes>
#include <climits>
#if _LIBCPP_HAS_LOCALIZATION
#  include <clocale>
#endif
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cuchar>
#include <cwchar>
#include <cwctype>

// *** Headers not yet available ***
//
// This validation is mainly to catch when a new header is added but adding the
// corresponding .inc file is forgotten. However, the check based on __has_include
// alone doesn't work on Windows because the Windows SDK is on the include path,
// and that means the MSVC STL headers can be found as well, tricking __has_include
// into thinking that libc++ provides the header.
//
#ifndef _WIN32
#  if __has_include(<debugging>)
#    error "please update the header information for <debugging> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<debugging>)
#  if __has_include(<flat_set>)
#    error "please update the header information for <flat_set> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<flat_set>)
#  if __has_include(<generator>)
#    error "please update the header information for <generator> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<generator>)
#  if __has_include(<hazard_pointer>)
#    error "please update the header information for <hazard_pointer> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<hazard_pointer>)
#  if __has_include(<inplace_vector>)
#    error "please update the header information for <inplace_vector> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<inplace_vector>)
#  if __has_include(<linalg>)
#    error "please update the header information for <linalg> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<linalg>)
#  if __has_include(<rcu>)
#    error "please update the header information for <rcu> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<rcu>)
#  if __has_include(<spanstream>)
#    error "please update the header information for <spanstream> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<spanstream>)
#  if __has_include(<stacktrace>)
#    error "please update the header information for <stacktrace> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stacktrace>)
#  if __has_include(<stdfloat>)
#    error "please update the header information for <stdfloat> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stdfloat>)
#  if __has_include(<text_encoding>)
#    error "please update the header information for <text_encoding> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<text_encoding>)
#endif // _WIN32

export module build_std.compat;
export import build_std;


#include "libcxx/std.compat/cassert.inc"
#include "libcxx/std.compat/cctype.inc"
#include "libcxx/std.compat/cerrno.inc"
#include "libcxx/std.compat/cfenv.inc"
#include "libcxx/std.compat/cfloat.inc"
#include "libcxx/std.compat/cinttypes.inc"
#include "libcxx/std.compat/climits.inc"
#include "libcxx/std.compat/clocale.inc"
#include "libcxx/std.compat/cmath.inc"
#include "libcxx/std.compat/csetjmp.inc"
#include "libcxx/std.compat/csignal.inc"
#include "libcxx/std.compat/cstdarg.inc"
#include "libcxx/std.compat/cstddef.inc"
#include "libcxx/std.compat/cstdint.inc"
#include "libcxx/std.compat/cstdio.inc"
#include "libcxx/std.compat/cstdlib.inc"
#include "libcxx/std.compat/cstring.inc"
#include "libcxx/std.compat/ctime.inc"
#include "libcxx/std.compat/cuchar.inc"
#include "libcxx/std.compat/cwchar.inc"
#include "libcxx/std.compat/cwctype.inc"

#elif defined(_MSC_VER)
// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// WARNING, this entire header is generated by
// utils/generate_libcxx_cppm_in.py
// DO NOT MODIFY!



#include "libstdcxx-msvc/__fake_config.h"

// The headers of Table 24: C++ library headers [tab:headers.cpp]
// and the headers of Table 25: C++ headers for C library facilities [tab:headers.cpp.c]
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <cinttypes>
#include <climits>
#if _LIBCPP_HAS_LOCALIZATION
#  include <clocale>
#endif
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cuchar>
#include <cwchar>
#include <cwctype>

// *** Headers not yet available ***
//
// This validation is mainly to catch when a new header is added but adding the
// corresponding .inc file is forgotten. However, the check based on __has_include
// alone doesn't work on Windows because the Windows SDK is on the include path,
// and that means the MSVC STL headers can be found as well, tricking __has_include
// into thinking that libc++ provides the header.
//
#ifndef _WIN32
#  if __has_include(<debugging>)
#    error "please update the header information for <debugging> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<debugging>)
#  if __has_include(<flat_set>)
#    error "please update the header information for <flat_set> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<flat_set>)
#  if __has_include(<generator>)
#    error "please update the header information for <generator> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<generator>)
#  if __has_include(<hazard_pointer>)
#    error "please update the header information for <hazard_pointer> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<hazard_pointer>)
#  if __has_include(<inplace_vector>)
#    error "please update the header information for <inplace_vector> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<inplace_vector>)
#  if __has_include(<linalg>)
#    error "please update the header information for <linalg> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<linalg>)
#  if __has_include(<rcu>)
#    error "please update the header information for <rcu> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<rcu>)
#  if __has_include(<spanstream>)
#    error "please update the header information for <spanstream> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<spanstream>)
#  if __has_include(<stacktrace>)
#    error "please update the header information for <stacktrace> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stacktrace>)
#  if __has_include(<stdfloat>)
#    error "please update the header information for <stdfloat> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<stdfloat>)
#  if __has_include(<text_encoding>)
#    error "please update the header information for <text_encoding> in headers_not_available in utils/libcxx/header_information.py"
#  endif // __has_include(<text_encoding>)
#endif // _WIN32
export module build_std.compat;
export import build_std;

#include "libstdcxx-msvc/std.compat/cassert.inc"
#include "libstdcxx-msvc/std.compat/cctype.inc"
#include "libstdcxx-msvc/std.compat/cerrno.inc"
#include "libstdcxx-msvc/std.compat/cfenv.inc"
#include "libstdcxx-msvc/std.compat/cfloat.inc"
#include "libstdcxx-msvc/std.compat/cinttypes.inc"
#include "libstdcxx-msvc/std.compat/climits.inc"
#include "libstdcxx-msvc/std.compat/clocale.inc"
#include "libstdcxx-msvc/std.compat/cmath.inc"
#include "libstdcxx-msvc/std.compat/csetjmp.inc"
#include "libstdcxx-msvc/std.compat/csignal.inc"
#include "libstdcxx-msvc/std.compat/cstdarg.inc"
#include "libstdcxx-msvc/std.compat/cstddef.inc"
#include "libstdcxx-msvc/std.compat/cstdint.inc"
#include "libstdcxx-msvc/std.compat/cstdio.inc"
#include "libstdcxx-msvc/std.compat/cstdlib.inc"
#include "libstdcxx-msvc/std.compat/cstring.inc"
#include "libstdcxx-msvc/std.compat/ctime.inc"
#include "libstdcxx-msvc/std.compat/cuchar.inc"
#include "libstdcxx-msvc/std.compat/cwchar.inc"
#include "libstdcxx-msvc/std.compat/cwctype.inc"

#elif defined(__GLIBCXX__)
// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// WARNING, this entire header is generated by
// utils/generate_libcxx_cppm_in.py
// DO NOT MODIFY!



#include "libstdcxx-gnu/__fake_config.h"

// The headers of Table 24: C++ library headers [tab:headers.cpp]
// and the headers of Table 25: C++ headers for C library facilities [tab:headers.cpp.c]
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <cinttypes>
#include <climits>
#if _LIBCPP_HAS_LOCALIZATION
#  include <clocale>
#endif
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cuchar>
#include <cwchar>
#include <cwctype>

// *** Headers not yet available ***
//
// This validation is mainly to catch when a new header is added but adding the
// corresponding .inc file is forgotten. However, the check based on __has_include
// alone doesn't work on Windows because the Windows SDK is on the include path,
// and that means the MSVC STL headers can be found as well, tricking __has_include
// into thinking that libc++ provides the header.
//
export module build_std.compat;
export import build_std;

#include "libstdcxx-gnu/std.compat/cassert.inc"
#include "libstdcxx-gnu/std.compat/cctype.inc"
#include "libstdcxx-gnu/std.compat/cerrno.inc"
#include "libstdcxx-gnu/std.compat/cfenv.inc"
#include "libstdcxx-gnu/std.compat/cfloat.inc"
#include "libstdcxx-gnu/std.compat/cinttypes.inc"
#include "libstdcxx-gnu/std.compat/climits.inc"
#include "libstdcxx-gnu/std.compat/clocale.inc"
#include "libstdcxx-gnu/std.compat/cmath.inc"
#include "libstdcxx-gnu/std.compat/csetjmp.inc"
#include "libstdcxx-gnu/std.compat/csignal.inc"
#include "libstdcxx-gnu/std.compat/cstdarg.inc"
#include "libstdcxx-gnu/std.compat/cstddef.inc"
#include "libstdcxx-gnu/std.compat/cstdint.inc"
#include "libstdcxx-gnu/std.compat/cstdio.inc"
#include "libstdcxx-gnu/std.compat/cstdlib.inc"
#include "libstdcxx-gnu/std.compat/cstring.inc"
#include "libstdcxx-gnu/std.compat/ctime.inc"
#include "libstdcxx-gnu/std.compat/cuchar.inc"
#include "libstdcxx-gnu/std.compat/cwchar.inc"
#include "libstdcxx-gnu/std.compat/cwctype.inc"

#endif
